# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.agent_datasosurce_list import AgentDatasosurceList
from ...types.agent_list import AgentList
from ...types.agent_tool_list import AgentToolList
from ...types.app_models_response_agent import AppModelsResponseAgent
from ...types.app_models_response_agent_invoke import AppModelsResponseAgentInvoke
from ...types.http_validation_error import HttpValidationError
from ...types.llm_params import LlmParams
from ...types.llm_provider import LlmProvider

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AgentClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, skip: typing.Optional[int] = None, take: typing.Optional[int] = None) -> AgentList:
        """
        List all agents

        Parameters:
            - skip: typing.Optional[int].

            - take: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/agents"),
            params=remove_none_from_dict({"skip": skip, "take": take}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AgentList, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        is_active: typing.Optional[bool] = OMIT,
        name: str,
        type: typing.Optional[str] = OMIT,
        initial_message: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        llm_model: typing.Optional[str] = OMIT,
        llm_provider: typing.Optional[LlmProvider] = OMIT,
        description: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        openai_options: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> AppModelsResponseAgent:
        """
        Create a new agent

        Parameters:
            - is_active: typing.Optional[bool].

            - name: str.

            - type: typing.Optional[str].

            - initial_message: typing.Optional[str].

            - prompt: typing.Optional[str].

            - llm_model: typing.Optional[str].

            - llm_provider: typing.Optional[LlmProvider].

            - description: typing.Optional[str].

            - avatar: typing.Optional[str].

            - openai_options: typing.Optional[typing.Dict[str, typing.Any]].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if is_active is not OMIT:
            _request["isActive"] = is_active
        if type is not OMIT:
            _request["type"] = type
        if initial_message is not OMIT:
            _request["initialMessage"] = initial_message
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if llm_model is not OMIT:
            _request["llmModel"] = llm_model
        if llm_provider is not OMIT:
            _request["llmProvider"] = llm_provider.value
        if description is not OMIT:
            _request["description"] = description
        if avatar is not OMIT:
            _request["avatar"] = avatar
        if openai_options is not OMIT:
            _request["openaiOptions"] = openai_options
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/agents"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, agent_id: str) -> AppModelsResponseAgent:
        """
        Get a single agent

        Parameters:
            - agent_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, agent_id: str) -> typing.Any:
        """
        Delete an agent

        Parameters:
            - agent_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        agent_id: str,
        *,
        is_active: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        initial_message: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        llm_model: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        type: typing.Optional[str] = OMIT,
        openai_options: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> AppModelsResponseAgent:
        """
        Patch an agent

        Parameters:
            - agent_id: str.

            - is_active: typing.Optional[bool].

            - name: typing.Optional[str].

            - initial_message: typing.Optional[str].

            - prompt: typing.Optional[str].

            - llm_model: typing.Optional[str].

            - description: typing.Optional[str].

            - avatar: typing.Optional[str].

            - type: typing.Optional[str].

            - openai_options: typing.Optional[typing.Dict[str, typing.Any]].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if is_active is not OMIT:
            _request["isActive"] = is_active
        if name is not OMIT:
            _request["name"] = name
        if initial_message is not OMIT:
            _request["initialMessage"] = initial_message
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if llm_model is not OMIT:
            _request["llmModel"] = llm_model
        if description is not OMIT:
            _request["description"] = description
        if avatar is not OMIT:
            _request["avatar"] = avatar
        if type is not OMIT:
            _request["type"] = type
        if openai_options is not OMIT:
            _request["openaiOptions"] = openai_options
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def invoke(
        self,
        agent_id: str,
        *,
        input: str,
        session_id: typing.Optional[str] = OMIT,
        enable_streaming: bool,
        output_schema: typing.Optional[str] = OMIT,
        llm_params: typing.Optional[LlmParams] = OMIT,
    ) -> AppModelsResponseAgentInvoke:
        """
        Invoke an agent

        Parameters:
            - agent_id: str.

            - input: str.

            - session_id: typing.Optional[str].

            - enable_streaming: bool.

            - output_schema: typing.Optional[str].

            - llm_params: typing.Optional[LlmParams].
        """
        _request: typing.Dict[str, typing.Any] = {"input": input, "enableStreaming": enable_streaming}
        if session_id is not OMIT:
            _request["sessionId"] = session_id
        if output_schema is not OMIT:
            _request["outputSchema"] = output_schema
        if llm_params is not OMIT:
            _request["llm_params"] = llm_params
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/invoke"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgentInvoke, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_llm(self, agent_id: str, *, llm_id: str) -> AppModelsResponseAgent:
        """
        Add LLM to agent

        Parameters:
            - agent_id: str.

            - llm_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/llms"),
            json=jsonable_encoder({"llmId": llm_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remove_llm(self, agent_id: str, llm_id: str) -> typing.Any:
        """
        Remove LLM from agent

        Parameters:
            - agent_id: str.

            - llm_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/llms/{llm_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_tools(self, agent_id: str) -> AgentToolList:
        """
        List agent tools

        Parameters:
            - agent_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/tools"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AgentToolList, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_tool(self, agent_id: str, *, tool_id: str) -> AppModelsResponseAgent:
        """
        Add tool to agent

        Parameters:
            - agent_id: str.

            - tool_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/tools"),
            json=jsonable_encoder({"toolId": tool_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remove_tool(self, agent_id: str, tool_id: str) -> typing.Any:
        """
        Remove tool from agent

        Parameters:
            - agent_id: str.

            - tool_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/tools/{tool_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_datasources(self, agent_id: str) -> AgentDatasosurceList:
        """
        List agent datasources

        Parameters:
            - agent_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/datasources"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AgentDatasosurceList, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_datasource(self, agent_id: str, *, datasource_id: str) -> AppModelsResponseAgent:
        """
        Add datasource to agent

        Parameters:
            - agent_id: str.

            - datasource_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/datasources"),
            json=jsonable_encoder({"datasourceId": datasource_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remove_datasource(self, agent_id: str, datasource_id: str) -> typing.Any:
        """
        Remove datasource from agent

        Parameters:
            - agent_id: str.

            - datasource_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/datasources/{datasource_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAgentClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(self, *, skip: typing.Optional[int] = None, take: typing.Optional[int] = None) -> AgentList:
        """
        List all agents

        Parameters:
            - skip: typing.Optional[int].

            - take: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/agents"),
            params=remove_none_from_dict({"skip": skip, "take": take}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AgentList, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        is_active: typing.Optional[bool] = OMIT,
        name: str,
        type: typing.Optional[str] = OMIT,
        initial_message: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        llm_model: typing.Optional[str] = OMIT,
        llm_provider: typing.Optional[LlmProvider] = OMIT,
        description: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        openai_options: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> AppModelsResponseAgent:
        """
        Create a new agent

        Parameters:
            - is_active: typing.Optional[bool].

            - name: str.

            - type: typing.Optional[str].

            - initial_message: typing.Optional[str].

            - prompt: typing.Optional[str].

            - llm_model: typing.Optional[str].

            - llm_provider: typing.Optional[LlmProvider].

            - description: typing.Optional[str].

            - avatar: typing.Optional[str].

            - openai_options: typing.Optional[typing.Dict[str, typing.Any]].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name}
        if is_active is not OMIT:
            _request["isActive"] = is_active
        if type is not OMIT:
            _request["type"] = type
        if initial_message is not OMIT:
            _request["initialMessage"] = initial_message
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if llm_model is not OMIT:
            _request["llmModel"] = llm_model
        if llm_provider is not OMIT:
            _request["llmProvider"] = llm_provider.value
        if description is not OMIT:
            _request["description"] = description
        if avatar is not OMIT:
            _request["avatar"] = avatar
        if openai_options is not OMIT:
            _request["openaiOptions"] = openai_options
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v1/agents"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, agent_id: str) -> AppModelsResponseAgent:
        """
        Get a single agent

        Parameters:
            - agent_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, agent_id: str) -> typing.Any:
        """
        Delete an agent

        Parameters:
            - agent_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        agent_id: str,
        *,
        is_active: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        initial_message: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        llm_model: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        type: typing.Optional[str] = OMIT,
        openai_options: typing.Optional[typing.Dict[str, typing.Any]] = OMIT,
    ) -> AppModelsResponseAgent:
        """
        Patch an agent

        Parameters:
            - agent_id: str.

            - is_active: typing.Optional[bool].

            - name: typing.Optional[str].

            - initial_message: typing.Optional[str].

            - prompt: typing.Optional[str].

            - llm_model: typing.Optional[str].

            - description: typing.Optional[str].

            - avatar: typing.Optional[str].

            - type: typing.Optional[str].

            - openai_options: typing.Optional[typing.Dict[str, typing.Any]].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if is_active is not OMIT:
            _request["isActive"] = is_active
        if name is not OMIT:
            _request["name"] = name
        if initial_message is not OMIT:
            _request["initialMessage"] = initial_message
        if prompt is not OMIT:
            _request["prompt"] = prompt
        if llm_model is not OMIT:
            _request["llmModel"] = llm_model
        if description is not OMIT:
            _request["description"] = description
        if avatar is not OMIT:
            _request["avatar"] = avatar
        if type is not OMIT:
            _request["type"] = type
        if openai_options is not OMIT:
            _request["openaiOptions"] = openai_options
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def invoke(
        self,
        agent_id: str,
        *,
        input: str,
        session_id: typing.Optional[str] = OMIT,
        enable_streaming: bool,
        output_schema: typing.Optional[str] = OMIT,
        llm_params: typing.Optional[LlmParams] = OMIT,
    ) -> AppModelsResponseAgentInvoke:
        """
        Invoke an agent

        Parameters:
            - agent_id: str.

            - input: str.

            - session_id: typing.Optional[str].

            - enable_streaming: bool.

            - output_schema: typing.Optional[str].

            - llm_params: typing.Optional[LlmParams].
        """
        _request: typing.Dict[str, typing.Any] = {"input": input, "enableStreaming": enable_streaming}
        if session_id is not OMIT:
            _request["sessionId"] = session_id
        if output_schema is not OMIT:
            _request["outputSchema"] = output_schema
        if llm_params is not OMIT:
            _request["llm_params"] = llm_params
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/invoke"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgentInvoke, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_llm(self, agent_id: str, *, llm_id: str) -> AppModelsResponseAgent:
        """
        Add LLM to agent

        Parameters:
            - agent_id: str.

            - llm_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/llms"),
            json=jsonable_encoder({"llmId": llm_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remove_llm(self, agent_id: str, llm_id: str) -> typing.Any:
        """
        Remove LLM from agent

        Parameters:
            - agent_id: str.

            - llm_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/llms/{llm_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_tools(self, agent_id: str) -> AgentToolList:
        """
        List agent tools

        Parameters:
            - agent_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/tools"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AgentToolList, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_tool(self, agent_id: str, *, tool_id: str) -> AppModelsResponseAgent:
        """
        Add tool to agent

        Parameters:
            - agent_id: str.

            - tool_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/tools"),
            json=jsonable_encoder({"toolId": tool_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remove_tool(self, agent_id: str, tool_id: str) -> typing.Any:
        """
        Remove tool from agent

        Parameters:
            - agent_id: str.

            - tool_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/tools/{tool_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_datasources(self, agent_id: str) -> AgentDatasosurceList:
        """
        List agent datasources

        Parameters:
            - agent_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/datasources"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AgentDatasosurceList, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_datasource(self, agent_id: str, *, datasource_id: str) -> AppModelsResponseAgent:
        """
        Add datasource to agent

        Parameters:
            - agent_id: str.

            - datasource_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/datasources"),
            json=jsonable_encoder({"datasourceId": datasource_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AppModelsResponseAgent, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remove_datasource(self, agent_id: str, datasource_id: str) -> typing.Any:
        """
        Remove datasource from agent

        Parameters:
            - agent_id: str.

            - datasource_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v1/agents/{agent_id}/datasources/{datasource_id}"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
